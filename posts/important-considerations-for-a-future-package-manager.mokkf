---
layout: post
collection: posts
permalink: /{{ page.data.collection }}/{{ page.date.year }}/{{ page.date.month
  }}/{{ page.date.day }}/{{ page.name }}/index.html
title: Important considerations for a future package manager
author: Em
date: 2021-07-06T23:53:00+00:00
tags:
  - micro
  - ramble
markdown: true
---
***

#### A foreword

This is my initial draft of [a GitHub discussion](https://github.com/Dirout/gany/discussions/5#discussion-3448930) concerning what a future system package manager would look like. If you're considering writing your own, I highly urge you read & consider what I have to say

***

## Vocabulary
- Package — a unit of shared software
- Repository — a collection of packaged software
- Distribution — a repository of software which is distributed to others

## Concepts
- [Delta encoding](https://en.wikipedia.org/wiki/Delta_encoding) — updating data by getting only the differences, as opposed to retrieving a whole new copy of a file
  - Updating a package's local data from a remote repository would use less bandwidth with this technique
- Multi-versioned packages — dropping [the assumption that only one version of a package may be installed at once](https://research.swtch.com/version-sat), minimising [dependency hell](https://en.wikipedia.org/wiki/Dependency_hell)
- Separation of package metadata — if a package does not come bundled with its own metadata, then getting a package's information from a remote source will not require downloading a package itself
  - Additionally, the file size of the package itself will be reduced
- Separate hierarchies & exchange directories — packages are separated from the rest of the file system, which will create less clutter and sources of conflict (such as from two packages providing a file with the same path and name)
  - Exchange directories may be global (such as `share`), so as to maintain compatibility with the [Filesystem Hierarchy Standard](https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard), or inter-package, for situations where one package may act as a plugin for another one
  - A separate hierarchy for packages will also ensure that a user's kernel & userland remains untouched, reducing the risk of system failure
- [Ghost files](http://ftp.rpm.org/max-rpm/s1-rpm-inside-files-list-directives.html#S3-RPM-INSIDE-FLIST-GHOST-DIRECTIVE) — software often produces files during its use, such as log files, state files, index files, and the sort. Such files should remain associated with the software's package so they can be removed along with the rest of the software

## Considerations
- Hooks and triggers
  - Without hooks or triggers, [concurrent package installation becomes much more possible](https://michael.stapelberg.ch/posts/2019-07-20-hooks-and-triggers/#hooks-preclude-concurrent-package-installation). Several major package managers [only use post-install hooks](https://michael.stapelberg.ch/posts/2019-08-17-linux-package-managers-are-slow/#current-landscape), and those can be [replaced with services](https://src.fedoraproject.org/rpms/openssh/blob/30922f629cc135e3233e263d5e3eb346f9251c4e/f/sshd-keygen%40.service)
  - While many would object to leaning on configuring an initialisation system instead of using hooks, particularly when many object with `systemd` as a whole (often due to its association with Lennart Poettering and [the philosophies of the `systemd` 'cabal' in general](http://0pointer.net/blog/revisiting-how-we-put-together-linux-systems.html)), I must say that I largely agree with them—quite frankly, I don't give a damn about how you (wrongly) feel about `systemd` being 'bloated' because the user experience will be improved by relying on it. If the notion of a system daemon scares you, then I don't know how to even begin to approach you; unless you're worried about some [Ken Thompson Bug](https://wiki.c2.com/?TheKenThompsonHack)-type scenario where `systemd` could be exploited, then you cannot be arguing in good faith
- Archives or Images?
  - The best contender for an image format would be [SquashFS](https://en.wikipedia.org/wiki/SquashFS). Snap packages utilise it, and they [come with a decent performance hit](https://forum.snapcraft.io/t/squashfs-performance-effect-on-snap-startup-time/13920). While [using an archive would make package installation faster](https://michael.stapelberg.ch/posts/2019-08-17-linux-package-managers-are-slow/#thought-experiment-further-speed-ups), at the end of the day the user is going to care more about their system running slow than whether or not their packages install a tad bit faster
  - The [LZ4 algorithm](https://en.wikipedia.org/wiki/LZ4_(compression_algorithm)) would provide the fastest decompression speeds available, ensuring the lowest decompression times possible during installation while also not sacrificing on the runtime performance of packaged software