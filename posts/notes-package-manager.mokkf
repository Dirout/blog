---
layout: post
collection: posts
permalink: /{{ page.data.collection }}/{{ page.date.year }}/{{ page.date.month
  }}/{{ page.date.day }}/{{ page.name }}/index.html
title: Quick notes on package managers
author: Em
date: 2021-05-09T17:50:47+00:00
tags:
  - micro
markdown: true
---
Package manager:
  - Install
  - Remove
  - Upgrade

# Install
  1. Attempt to get list of dependencies
        1. Outcome one: No dependencies (**continue**)
        2. Outcome two: Impossible situation (**error**)
        3. Outcome three: Dependency list satisfied (**continue**)
            - It appears using a SAT solver would be best. Only one problem â€¦ I can't understand how to use it or what exactly one does.
              - Things I've looked at:
                1. [Version SAT by Russ Cox](https://research.swtch.com/version-sat)
                2. [Cargo's dependency resolution](https://github.com/rust-lang/cargo/blob/8b5aec111926d1d03d2da32dd494e0fff073f870/src/cargo/core/resolver/mod.rs#L426)
  2. Decide order of dependency installation
      - Some can be installed in parallel
      - It appears the best algorithm for this would be a topological sort? Not sure what that is yet
  3. Done!

### Things to consider
- Hooks? Here's [an article](https://michael.stapelberg.ch/posts/2019-07-20-hooks-and-triggers/) on the subject.
  - Packages with hooks can't be installed in parallel with other packages.
  - Hooks present many downsides, but having package manager triggers don't seem any better. The alternative would be to have the package manager hardcode a pre-set list of actions, but I don't see how this would improve the primary downside: an interruption to installation.
- Installing an individual package?
  - The mainstream approach is archive extraction. This would be a bit slow, wouldn't it? Would it be possible to download files directly to the machine? Wouldn't this increase download times despite lowering processor time? Perhaps a disk image would work instead? But how would you use it after mounting it, and wouldn't this lead to the same problem of increasing download times if the disk image is bigger than an archive?
- Keeping track of installed packages?
  - Binary serialization using [`bincode`](https://crates.io/crates/bincode) of a `Vec<&str>` containing installed package names
    - Would loading all the installed packages into RAM from disk really be such a good idea? Ultimately, my primary concern is performance. How much space would a list of, say, 4,000 packages take up on disk? What about in RAM?
    - Consider databases instead? Find the fastest Rust database implementation that'll work.